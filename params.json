{
  "name": "Reactsite",
  "tagline": "",
  "body": "# Reactsite\r\n\r\nreact 这玩意儿，写的些复杂，现在放上来，也算是一个体会这种框架的神奇功效，呵呵<br />\r\n基本大致思想：<br />\r\n<p>\r\n1.html标签被model给封装，实时在那边跑帧，输出所要显示的数据及内容，类似淘宝上，你手机操作,web界面给相应变化，这也是互动比较强的，按做互动效果来说的话，呵呵\r\n</p>\r\n<p>\r\n这边解释一下为啥 在html标签 里要加些类似这种｛this.state.name｝这个功能 其实就是一个实时输出变化，刚才提到跑帧，这种思想应该是flash player的模式，所以，数据改变，这个name也会相应改变，这就是静态变化，所谓的什么双向链路。\r\n</p>\r\n好高大上的，其实没什么，这基本就是解决前后规范及，后端压力问题。\r\n<p>\r\n欢迎一起挖坑的，填坑的过来分享！\r\n</p>\r\n<pre>\r\n\t/**\r\n\t * @description react库\r\n\t */\r\n  var React=require('react');\r\n  var ReactDOM=require('reactdom');\r\n  /**\r\n   * @description 其他页面标签载入\r\n   */\r\n  var Header=require('app/header')(id_webpage,React);\r\n  var Home=require('app/home')(id_webpage,React);\r\n  var Jeans=require('app/jeans')(id_webpage,React);\r\n  //数组\r\n  var arr=[];\r\n  /**\r\n   * @description main主输出标签\r\n   */\r\n  var Trees = React.createClass({displayName: \"Trees\",\r\n    propTypes:{ \r\n            data: React.PropTypes.string.isRequired\r\n    },\r\n    render : function() {\r\n        return React.createElement(\"div\", null, \r\n            React.createElement(Header, null), \r\n             React.createElement(Home, null), \r\n             React.createElement(Jeans, null), \r\n             this.props.data\r\n        );\r\n    }\r\n    });\r\n    /**\r\n     * @descripton 实时渲染页面\r\n     * \r\n     */\r\n    ReactDOM.render(React.createElement(Trees, {data: arr}),id_webpage);  \r\n</pre>\r\n<p>\r\njsx本地构建成静态代码\r\n</p>\r\nNPM\r\n-----------------------------------------------------\r\n<pre>\r\nstep 1\r\nnpm install -g react-tools\r\nstep 2\r\njsx --watch 目标目录 生成目录\r\n</pre>\r\nUpdate\r\n------------------------------------------------------\r\n\r\n\r\nVersion \r\n------------------------------------------------------\r\nv1.0.0 update<br />\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}